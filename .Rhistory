#' @import dplyr
#' @import utils
#' @import ggplot2
#'
#' @export
sna_topic_country <- function( res ) {
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
countries <- unique( unlist( countries ) )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
# layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- igraph::layout_randomly( g )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.2
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.2
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
return( g_bi )
}
sna_topic_country( res )
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
#' Social Network Analysis - Topic-Country Relationship
#'
#' The `sna_topic_country()` function analyses a network analysis based on topics (keywords) and countries
#' from the given publication data. It visualizes the relationship between different
#' topics and the countries associated with those topics.
#'
#' @param res A list containing Scopus search results with an `entries` element,
#'   where each entry contains `authkeywords` (keywords separated by '|'),
#'   `dc:description` (abstract), and `affiliation` (containing `affiliation-country`).
#'
#' @return A `ggraph` object that visualizes the network of topics and countries.
#' The plot includes nodes representing topics and countries, with edges showing
#' the connections between them. Nodes are color-coded by their type (topics or countries),
#' and edge thickness is proportional to the number of shared keywords between topics and countries.
#' The color of the edges is determined by the frequency of connections, with a gradient
#' from light blue (low frequency) to dark blue (high frequency).
#'
#' @examples
#' res <- list(
#'   entries = list(
#'     list(
#'       authkeywords = "AI|Machine Learning|Data Science",
#'       dc.description = "This paper discusses advancements in AI and machine learning.",
#'       affiliation = list(
#'         list(`affiliation-country` = "United States"),
#'         list(`affiliation-country` = "China")
#'       )
#'     ),
#'     list(
#'       authkeywords = "Quantum Computing|AI",
#'       dc.description = "Explores quantum computing and its applications in AI.",
#'       affiliation = list(
#'         list(`affiliation-country` = "Germany")
#'       )
#'     )
#'   )
#' )
#'
#' sna_topic_country( res )
#'
#' @import dplyr
#' @import utils
#' @import ggplot2
#'
#' @export
sna_topic_country <- function( res ) {
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
countries <- unique( unlist( countries ) )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.3
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.3
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
return( g_bi )
}
sna_topic_country( res )
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
source("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/R/sna_topic_country.R", echo=TRUE)
library(usethis)
library(roxygen2)
library(devtools)
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
library(usethis)
library(roxygen2)
library(devtools)
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
rmarkdown::render("vignettes/getting-started.Rmd")
check()
strwrap()
?strwrap()
#' Plot Sponsor Overview
#'
#' The `plot_sponsor_overview()` function analyses and visualise
#' the sponsors from Scopus search results..
#'
#' @param res Scopus search results, including `entries`, which is a list of publication details.
#'   Each entry should have the fields `dc:title`, `prism:coverDate`, and `fund-sponsor` (with `fund-acr` for abbreviation).
#'
#' @return A ggplot2 object showing the analysis results.
#'
#' @examples
#' # Create a sample `res` list to simulate Scopus API search results
#' res = list(
#'   entries = list(
#'     list(
#'       `dc:title` = "A Study on Data Analysis",
#'       `prism:coverDate` = "2022-12-31",
#'       `fund-sponsor` = "National Science Foundation",
#'       `fund-acr` = "NSF"
#'     ),
#'     list(
#'       `dc:title` = "Advances in Machine Learning",
#'       `prism:coverDate` = "2022-11-30",
#'       `fund-sponsor` = "China Scholarship Council",
#'       `fund-acr` = "CSC"
#'     ),
#'     list(
#'       `dc:title` = "Research in Quantum Computing",
#'       `prism:coverDate` = "2022-10-15",
#'       `fund-sponsor` = "German Research Foundation",
#'       `fund-acr` = "DFG"
#'     ),
#'     list(
#'       `dc:title` = "Innovations in AI",
#'       `prism:coverDate` = "2022-09-01",
#'       `fund-sponsor` = "Engineering and Physical Sciences Research Council",
#'       `fund-acr` = "EPSRC"
#'     ),
#'     list(
#'       `dc:title` = "Exploring New Frontiers in Science",
#'       `prism:coverDate` = "2022-08-01",
#'       `fund-sponsor` = NULL,
#'       `fund-acr` = NULL
#'     )
#'   )
#' )
#'
#' # Example usage of the function with the sample data
#' plot_sponsor_overview( res )
#'
#' @import dplyr
#'
#' @export
plot_sponsor_overview <- function( res ) {
entries <- res$entries
data <- lapply( entries, function( entry ) {
title <- entry$`dc:title`
year <- substr( entry$`prism:coverDate`, 1, 4 )
sponsor <- if ( !is.null(entry$`fund-sponsor`) ) {
entry$`fund-sponsor`
} else {
"Unknown"
}
list( title = title, year = year, sponsor = sponsor )
})
data.tib <- tibble::tibble(
title    = sapply( data, `[[`, "title" ),
year     = sapply( data, `[[`, "year" ),
sponsor  = unlist( lapply( data, `[[`, "sponsor" ) )
)
top_sponsors <- data.tib |>
dplyr::filter( sponsor != "Unknown" )  |>
dplyr::count( sponsor, sort = TRUE ) |>
utils::head( 8 ) |>
dplyr::arrange( n ) |>
dplyr::pull( sponsor )
latest_year <- ifelse(
!is.null( res$meta_data ) && !is.null( res$meta_data$end_year ),
res$meta_data$end_year,
max( as.numeric( format( as.Date(
sapply( res$entries, function(x) x$`prism:coverDate` ) ), "%Y" ) ), na.rm = TRUE )
)
data.tib <- data.tib |>
dplyr::mutate( year = ifelse( year <= latest_year-10, paste0( "-", latest_year-10 ), year )) |>
dplyr::mutate( year = factor( year ) ) |>
dplyr::mutate( sponsor = ifelse( sponsor %in% c(top_sponsors, "Unknown"), sponsor, "Other")) |>
dplyr::mutate( sponsor = factor( sponsor, levels = c( "Unknown", "Other", top_sponsors )))
share_data.tib <- data.tib |>
dplyr::count( sponsor ) |>
dplyr::mutate( share = n / sum(n) ) |>
dplyr::filter( sponsor != "Unknown" )
data.tib <- data.tib |> dplyr::filter( sponsor != "Unknown" )
max_n <- max( dplyr::count( data.tib, sponsor )$n )
len_n <- length( unique( data.tib$sponsor ) )
g_bar <- data.tib |>
ggplot2::ggplot() +
ggplot2::geom_bar( position = ggplot2::position_stack( reverse = TRUE),
ggplot2::aes( y = sponsor, fill = year ) ) +
ggplot2::geom_text( stat = "count", ggplot2::aes( y = sponsor, label = ggplot2::after_stat(count) ),
size = 3, hjust = 0, nudge_x = max_n * 0.01 ) +
ggplot2::scale_fill_brewer( palette = "RdBu" ) +
ggplot2::geom_point( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.15, y = sponsor, size = share ),
shape = 21, fill = "lightblue", colour = "lightblue",
show.legend = FALSE ) +
ggplot2::geom_text( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.25 , y = sponsor, label = sprintf("%.1f%%", share*100) ),
colour = "navy", show.legend = FALSE ) +
ggplot2::annotate( "text", x = max_n*0.5, y = len_n + 1, label = "Total Number of Publications" ) +
ggplot2::annotate( "text", x = max_n*1.2 , y = len_n + 1, label = "Global Share" ) +
ggplot2::scale_size_continuous( range = c( 0, 8 )) +
ggplot2::scale_x_discrete( expand = c(0,0,0.10,0) ) +
ggplot2::scale_y_discrete( expand = c(0,0,0,1.5),
labels = function(x) paste0( strwrap( x, width = 25 ), collapse = "\n") ) +
ggplot2::theme_minimal() +
ggplot2::labs( x = "Number and Global Share of Publications",
y = "Sponsor",
fill = "" ) +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.65, 0.5),
legend.box = "vertical",
legend.key.size = ggplot2::unit( 0.3, "cm" ),
legend.text = ggplot2::element_text( size = 6.5 ),
axis.text.y = element_text( size = 7 )
)
return( g_bar )
}
plot_sponsor_overview(res)
#' Plot Sponsor Overview
#'
#' The `plot_sponsor_overview()` function analyses and visualise
#' the sponsors from Scopus search results..
#'
#' @param res Scopus search results, including `entries`, which is a list of publication details.
#'   Each entry should have the fields `dc:title`, `prism:coverDate`, and `fund-sponsor` (with `fund-acr` for abbreviation).
#'
#' @return A ggplot2 object showing the analysis results.
#'
#' @examples
#' # Create a sample `res` list to simulate Scopus API search results
#' res = list(
#'   entries = list(
#'     list(
#'       `dc:title` = "A Study on Data Analysis",
#'       `prism:coverDate` = "2022-12-31",
#'       `fund-sponsor` = "National Science Foundation",
#'       `fund-acr` = "NSF"
#'     ),
#'     list(
#'       `dc:title` = "Advances in Machine Learning",
#'       `prism:coverDate` = "2022-11-30",
#'       `fund-sponsor` = "China Scholarship Council",
#'       `fund-acr` = "CSC"
#'     ),
#'     list(
#'       `dc:title` = "Research in Quantum Computing",
#'       `prism:coverDate` = "2022-10-15",
#'       `fund-sponsor` = "German Research Foundation",
#'       `fund-acr` = "DFG"
#'     ),
#'     list(
#'       `dc:title` = "Innovations in AI",
#'       `prism:coverDate` = "2022-09-01",
#'       `fund-sponsor` = "Engineering and Physical Sciences Research Council",
#'       `fund-acr` = "EPSRC"
#'     ),
#'     list(
#'       `dc:title` = "Exploring New Frontiers in Science",
#'       `prism:coverDate` = "2022-08-01",
#'       `fund-sponsor` = NULL,
#'       `fund-acr` = NULL
#'     )
#'   )
#' )
#'
#' # Example usage of the function with the sample data
#' plot_sponsor_overview( res )
#'
#' @import dplyr
#'
#' @export
plot_sponsor_overview <- function( res ) {
entries <- res$entries
data <- lapply( entries, function( entry ) {
title <- entry$`dc:title`
year <- substr( entry$`prism:coverDate`, 1, 4 )
sponsor <- if ( !is.null(entry$`fund-sponsor`) ) {
entry$`fund-sponsor`
} else {
"Unknown"
}
list( title = title, year = year, sponsor = sponsor )
})
data.tib <- tibble::tibble(
title    = sapply( data, `[[`, "title" ),
year     = sapply( data, `[[`, "year" ),
sponsor  = unlist( lapply( data, `[[`, "sponsor" ) )
)
top_sponsors <- data.tib |>
dplyr::filter( sponsor != "Unknown" )  |>
dplyr::count( sponsor, sort = TRUE ) |>
utils::head( 8 ) |>
dplyr::arrange( n ) |>
dplyr::pull( sponsor )
latest_year <- ifelse(
!is.null( res$meta_data ) && !is.null( res$meta_data$end_year ),
res$meta_data$end_year,
max( as.numeric( format( as.Date(
sapply( res$entries, function(x) x$`prism:coverDate` ) ), "%Y" ) ), na.rm = TRUE )
)
data.tib <- data.tib |>
dplyr::mutate( year = ifelse( year <= latest_year-10, paste0( "-", latest_year-10 ), year )) |>
dplyr::mutate( year = factor( year ) ) |>
dplyr::mutate( sponsor = ifelse( sponsor %in% c(top_sponsors, "Unknown"), sponsor, "Other")) |>
dplyr::mutate( sponsor = factor( sponsor, levels = c( "Unknown", "Other", top_sponsors )))
share_data.tib <- data.tib |>
dplyr::count( sponsor ) |>
dplyr::mutate( share = n / sum(n) ) |>
dplyr::filter( sponsor != "Unknown" )
data.tib <- data.tib |> dplyr::filter( sponsor != "Unknown" )
max_n <- max( dplyr::count( data.tib, sponsor )$n )
len_n <- length( unique( data.tib$sponsor ) )
g_bar <- data.tib |>
ggplot2::ggplot() +
ggplot2::geom_bar( position = ggplot2::position_stack( reverse = TRUE),
ggplot2::aes( y = sponsor, fill = year ) ) +
ggplot2::geom_text( stat = "count", ggplot2::aes( y = sponsor, label = ggplot2::after_stat(count) ),
size = 3, hjust = 0, nudge_x = max_n * 0.01 ) +
ggplot2::scale_fill_brewer( palette = "RdBu" ) +
ggplot2::geom_point( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.15, y = sponsor, size = share ),
shape = 21, fill = "lightblue", colour = "lightblue",
show.legend = FALSE ) +
ggplot2::geom_text( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.25 , y = sponsor, label = sprintf("%.1f%%", share*100) ),
colour = "navy", show.legend = FALSE ) +
ggplot2::annotate( "text", x = max_n*0.5, y = len_n + 1, label = "Total Number of Publications" ) +
ggplot2::annotate( "text", x = max_n*1.2 , y = len_n + 1, label = "Global Share" ) +
ggplot2::scale_size_continuous( range = c( 0, 8 )) +
ggplot2::scale_x_discrete( expand = c(0,0,0.10,0) ) +
ggplot2::scale_y_discrete( expand = c(0,0,0,1.5),
labels = function(x) str_wrap( x, width = 25 ) ) +
ggplot2::theme_minimal() +
ggplot2::labs( x = "Number and Global Share of Publications",
y = "Sponsor",
fill = "" ) +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.65, 0.5),
legend.box = "vertical",
legend.key.size = ggplot2::unit( 0.3, "cm" ),
legend.text = ggplot2::element_text( size = 6.5 ),
axis.text.y = element_text( size = 7 )
)
return( g_bar )
}
plot_sponsor_overview(res)
packageVersion("stringr")
packageVersion("knitr")
packageVersion("rmarkdown")
library(usethis)
library(roxygen2)
library(devtools)
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
detach( "package:bibliokit", unload = TRUE )
install.packages("../bibliokit_0.1.0.tar.gz")
library( bibliokit )
library( bibliokit )
library( bibliokit )
rmarkdown::render("vignettes/getting-started.Rmd")
load("inst/extdata/sample_data_quantum_noisy.rda")
res$meta_data
rmarkdown::render("vignettes/getting-started.Rmd")
