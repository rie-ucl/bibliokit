#'       `dc:title` = "Advances in Machine Learning",
#'       `prism:coverDate` = "2021-11-30",
#'       author = list(
#'         list( `authname` = "Author 1" ),
#'         list( `authname` = "Author 2" ),
#'         list( `authname` = "Author 3" ),
#'         list( `authname` = "Author 4" ),
#'         list( `authname` = "Author 5" )
#'       )
#'     ),
#'     list(
#'       `dc:title` = "Research in Quantum Computing",
#'       `prism:coverDate` = "2020-10-15",
#'       author = list(
#'         list( `authname` = "Author 1" )
#'       )
#'     )
#'   )
#' )
#'
#' # Example usage of the function with the sample data
#' plot_authnum_trend( res, type = "stack" )
#'
#' @import utils
#' @import ggplot2
#' @import dplyr
#' @import tidyr
#' @import ggrepel
#' @import tools
#' @export
plot_authnum_trend <- function( res, type = "line" ) {
entries <- res$entries
# Extract year and author count from each entry
data <- lapply( entries, function( entry ) {
year <- substr( entry$`prism:coverDate`, 1, 4 )
auth_count <- length( entry$author )
if ( auth_count >= 10 ) {
auth_count <- "10+"
} else if ( auth_count >= 5 ) {
auth_count <- "5-9"
} else {
auth_count <- as.character( auth_count )
}
list( year = year, auth_count = auth_count )
})
# Convert the extracted data into a tibble
data.tib <- tibble::tibble(
year = sapply( data, `[[`, "year" ),
auth_count = sapply( data, `[[`, "auth_count" )
)
# Summarize the data by year and author count
yearly_data.tib <- data.tib |>
dplyr::group_by( year, auth_count ) |>
dplyr::summarise( n = dplyr::n(), .groups = "drop" ) |>
tidyr::complete( year, auth_count, fill = list( n = 0 ) ) |>
dplyr::mutate( auth_count = factor( auth_count, levels = c( "10+", "5-9", "4", "3", "2", "1" ) ) )
# Create the plot
g <- yearly_data.tib |>
ggplot2::ggplot(
mapping = ggplot2::aes(
x = as.Date( paste0( year, "-01-01" ) ),
y = n,
fill = auth_count,
colour = auth_count
)
)
title <- paste(
"Trends in Publications by Author Count (",
bibliokit::get_search_terms( res )[[1,2]], ")" )
if ( type == "stack" ) title <- paste( "Stacked", title )
if ( type == "ratio" ) title <- paste( "Propotional", title )
# Modify the plot based on the type
if ( type == "line" ) {
g <- g +
ggplot2::geom_line( linewidth = 0.8, ggplot2::aes( group = auth_count ) ) +
ggplot2::geom_point( size = 3, shape = 21, fill = "white" )
} else if ( type == "stack" ) {
g <- g + ggplot2::geom_area( position = "stack", alpha = 0.8 )
} else if ( type == "ratio" ) {
g <- g + ggplot2::geom_area( position = "fill", alpha = 0.8 ) +
ggplot2::scale_y_continuous( labels = scales::percent_format() )
}
# Add common elements to the plot
g <- g +
ggplot2::scale_x_date( date_labels = "%Y", date_breaks = "1 year", expand = c( 0.02,0,0.02,0 ) ) +
ggplot2::scale_colour_brewer( palette = "Dark2", aesthetics = c( "fill", "colour" ) ) +
ggplot2::labs( x = "Year", y = ifelse( type == "ratio", "Percentage", "Number of Publications" ) ) +
ggplot2::theme(
panel.background = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line( colour = "WhiteSmoke" ),
axis.ticks = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text( angle = 45, hjust = 1 )
) +
ggplot2::labs( title = title )
return( g )
}
library(usethis)
library(roxygen2)
library(devtools)
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
res <- lits( hoge = list(), hoge2 = list() )
res <- list( hoge = list(), hoge2 = list() )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
load( "../inst/extdata/sample_data_quantum.rda" )
load( "../inst/extdata/sample_data_quantum.rda" )
load( "inst/extdata/sample_data_quantum.rda" )
bibliokit::rank_sponsors( res, n = 5 )
bibliokit::plot_country_overview( res )
bibliokit::plot_country_overview( res )
bibliokit::plot_country_trend( res )
bibliokit::plot_sponsor_overview( res )
bibliokit::plot_sponsor_trend( res )
bibliokit::plot_authnum_trend( res )
bibliokit::plot_authnum_trend( res )
Sys.getlocale("LC_TYPE")
Sys.getlocale("LC_CTYPE")
Sys.setlocale("LC_CTYPE", "C")
rmarkdown::render("vignettes/getting-started.Rmd")
knit_with_parameters("C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
get_search_terms(res)
sna_topic_country(res)
load("../../research-dissertation/bibdata/rscopus-2024_08_02-oryza_sativa.rda")
res_oryza <- res
sna_topic_country(res_oryza)
load("../../research-dissertation/bibdata/rscopus-2024_07_31-quantum.rda")
res_quantum <- res
sna_topic_country(res_quantum)
#' Social Network Analysis - Topic-Country Relationship
#'
#' This function performs a network analysis based on topics (keywords) and countries
#' from the given publication data. It visualizes the relationship between different
#' topics and the countries associated with those topics.
#'
#' @param res A list containing Scopus search results with an `entries` element,
#'   where each entry contains `authkeywords` (keywords separated by '|'),
#'   `dc:description` (abstract), and `affiliation` (containing `affiliation-country`).
#'
#' @return A `ggraph` object that visualizes the network of topics and countries.
#' The plot includes nodes representing topics and countries, with edges showing
#' the connections between them. Nodes are color-coded by their type (topics or countries),
#' and edge thickness is proportional to the number of shared keywords between topics and countries.
#' The color of the edges is determined by the frequency of connections, with a gradient
#' from light blue (low frequency) to dark blue (high frequency).
#'
#' @examples
#' res <- list(
#'   entries = list(
#'     list(
#'       authkeywords = "AI|Machine Learning|Data Science",
#'       dc.description = "This paper discusses advancements in AI and machine learning.",
#'       affiliation = list(
#'         list(`affiliation-country` = "United States"),
#'         list(`affiliation-country` = "China")
#'       )
#'     ),
#'     list(
#'       authkeywords = "Quantum Computing|AI",
#'       dc.description = "Explores quantum computing and its applications in AI.",
#'       affiliation = list(
#'         list(`affiliation-country` = "Germany")
#'       )
#'     )
#'   )
#' )
#'
#' sna_topic_country( res )
#'
#' @import dplyr
#' @import utils
#' @import ggplot2
#'
#' @export
sna_topic_country <- function( res ) {
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.2
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.2
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
return( g_bi )
}
sna_topic_country(res_quantum)
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topics_countries
entry
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
countries
entry
entry$affiliation
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries
length(countries)
entry$affiliation
entry$affiliation[[1]]
entry$affiliation[[1]]$`affiliation-country`
countries
unlist( countries )
entry <- entries[[2]]
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unlist( countries )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
topic_countries
topics_countries
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unlist( countries )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print( entry$`prism:doi` )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
length(entries)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print(counter)
counter <- counter - 1
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
counter <- length( entries )
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print(counter)
counter <- counter - 1
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.2
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.2
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
bibliokit::sna_countries( res )
