#'       authkeywords = "AI|Machine Learning|Data Science",
#'       dc.description = "This paper discusses advancements in AI and machine learning.",
#'       affiliation = list(
#'         list(`affiliation-country` = "United States"),
#'         list(`affiliation-country` = "China")
#'       )
#'     ),
#'     list(
#'       authkeywords = "Quantum Computing|AI",
#'       dc.description = "Explores quantum computing and its applications in AI.",
#'       affiliation = list(
#'         list(`affiliation-country` = "Germany")
#'       )
#'     )
#'   )
#' )
#'
#' sna_topic_country( res )
#'
#' @import dplyr
#' @import utils
#' @import ggplot2
#'
#' @export
sna_topic_country <- function( res ) {
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.2
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.2
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
return( g_bi )
}
sna_topic_country(res_quantum)
entries <- res$entries
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topics_countries
entry
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
countries
entry
entry$affiliation
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries
length(countries)
entry$affiliation
entry$affiliation[[1]]
entry$affiliation[[1]]$`affiliation-country`
countries
unlist( countries )
entry <- entries[[2]]
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unlist( countries )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
topic_countries
topics_countries
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unlist( countries )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print( entry$`prism:doi` )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
length(entries)
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print(counter)
counter <- counter - 1
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
counter <- length( entries )
for ( entry in entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- unique( unlist( countries ) )
print(counter)
counter <- counter - 1
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
topic_ranking <- topics_countries |>
dplyr::count( topic ) |>
dplyr::arrange( dplyr::desc(n) )
country_ranking <- topics_countries |>
dplyr::count( country ) |>
dplyr::arrange( dplyr::desc(n) )
top_countries <- country_ranking |> utils::head(6)  |> dplyr::pull(country)
top_topics    <- topic_ranking   |> utils::head(10) |> dplyr::pull(topic)
top_data <- topics_countries |>
dplyr::filter( topic %in% top_topics, country %in% top_countries )
edges <- top_data |>
dplyr::count( topic, country ) |>
as.data.frame()
nodes <- unique( c( as.character( edges$topic ), as.character( edges$country ) ) )
node_type <- ifelse( nodes %in% unique( edges$country ), TRUE, FALSE )
g <- igraph::graph_from_data_frame(
edges, vertices = data.frame( name = nodes, type = node_type ) )
igraph::V(g)$size <- igraph::degree(g)
max_n <- max( igraph::E(g)$n )
layout <- igraph::layout_as_bipartite( g, types = igraph::V(g)$type )
layout <- layout[ , c(2, 1) ]
layout[igraph::V(g)$type == TRUE,  1] <- layout[igraph::V(g)$type == TRUE,  1] + 0.2
layout[igraph::V(g)$type == FALSE, 1] <- layout[igraph::V(g)$type == FALSE, 1] - 0.2
(
g_bi <- ggraph::ggraph( g, layout = layout ) +
ggraph::geom_edge_link(
ggplot2::aes( width = n/max_n * 3,
colour = paste0("gray",80-as.integer(n*80/max_n)) ),
show.legend = FALSE ) +
ggraph::geom_node_point( ggplot2::aes( size = size,
colour = type, fill = type ),
position = ggplot2::position_dodge( width = 0.4 ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name, hjust = ifelse( type, 1, 0 ),
x = x + ifelse( type, -0.01, 0.01 ) ) ) +
ggplot2::scale_fill_brewer(
palette = "Set1", direction = -1, aesthetics = c( "colour", "fill" ) ) +
ggplot2::theme_void()
)
bibliokit::sna_countries( res )
load("../../research-dissertation/bibdata/rscopus-2024_08_02-oryza_sativa.rda")
bibliokit::sna_countries(res)
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in res$entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
countries <- countries[!is.na(countries) & countries != ""]
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
#' Social Network Analysis - Network of Country Co-occurrences
#'
#' This function analyzes co-occurrence data between countries based on shared keywords
#' and creates a network graph visualizing the relationships between countries.
#' The network is constructed based on the frequency of shared keywords between countries.
#' The resulting graph can help in understanding how countries are connected through common research topics.
#'
#' @param res A list containing Scopus search results, which includes:
#'   - `entries`: A list of publication entries where each entry contains:
#'     - `authkeywords`: Keywords related to the publication, separated by `|`.
#'     - `affiliation`: A list of affiliation details, including:
#'       - `affiliation-country`: The country associated with the publication's affiliation.
#'
#' @return A `ggraph` object showing the network of countries based on their co-occurrence in research topics.
#'   The network visualizes countries as nodes and the strength of their connections (based on shared keywords)
#'   as edges between these nodes. Nodes are sized according to their importance in the network, and edges
#'   are colored based on their weight.
#'
#' @examples
#' res <- list(
#'   entries = list(
#'     list(
#'       authkeywords = "Artificial Intelligence|Machine Learning",
#'       affiliation = list(
#'         list( `affiliation-country` = "USA" )
#'       )
#'     ),
#'     list(
#'       authkeywords = "Artificial Intelligence|Data Science",
#'       affiliation = list(
#'         list( `affiliation-country` = "UK" )
#'       )
#'     ),
#'     list(
#'       authkeywords = "Machine Learning|Data Science",
#'       affiliation = list(
#'         list( `affiliation-country` = "Canada")
#'       )
#'     ),
#'     list(
#'       authkeywords = "Artificial Intelligence|Machine Learning|Data Science",
#'       affiliation = list(
#'         list( `affiliation-country` = "Germany")
#'       )
#'     )
#'   )
#' )
#'
#' network_graph <- sna_countries( res )
#' print( network_graph )
#'
#' @import dplyr
#'
#' @export
sna_countries <- function( res ) {
topics_countries <- data.frame(
topic = character(),
country = character(),
stringsAsFactors = FALSE
)
for ( entry in res$entries ) {
if ( !is.null( entry$authkeywords ) && !is.null( entry$affiliation ) ) {
keywords <- unlist( strsplit( entry$authkeywords, "\\|") )
keywords <- tolower( trimws( keywords ) )
# countries <- unique( sapply( entry$affiliation, function(x) x$`affiliation-country` ) )
# countries <- countries[!is.na(countries) & countries != ""]
countries <- sapply( entry$affiliation, function(x) x$`affiliation-country` )
countries <- unique( unlist( countries ) )
if ( length( countries ) > 0 && length( keywords ) > 0) {
for ( keyword in keywords ) {
if ( keyword != "" ) {
for ( country in countries) {
if ( country != "" ) {
topics_countries <-
rbind( topics_countries,
data.frame( topic = keyword,
country = country,
stringsAsFactors = FALSE) )
}
}
}
}
}
}
}
country_pairs <- topics_countries |>
dplyr::group_by(topic)  |>
dplyr::summarise(countries = list(country), .groups = 'drop')  |>
dplyr::rowwise() |>
dplyr::filter( length( countries ) > 1 ) |>
dplyr::mutate(pairs = list(t(combn(countries, 2)))) |>
tidyr::unnest(pairs) |>
dplyr::count(V1 = pairs[,1], V2 = pairs[,2], name = "co" )
country_matrix <- country_pairs |>
tidyr::pivot_wider( names_from = V2, values_from = co, values_fill = 0 )
g <- igraph::graph_from_data_frame( country_pairs, directed = FALSE )
g_kk <- ggraph::ggraph( g, layout = "kk" ) +
ggraph::geom_edge_link(
ggplot2::aes( edge_width = co, edge_alpha = co ), show.legend = FALSE ) +
ggraph::geom_node_point(
ggplot2::aes( size = igraph::degree( g, mode = "all" ) + 1, colour = name, fill = name ),
shape = 21, show.legend = FALSE ) +
ggraph::geom_node_text( ggplot2::aes( label = name ), repel = TRUE, size = 3 ) +
ggraph::scale_edge_width( range = c( 0.1, 4 ) ) +
ggraph::scale_edge_alpha( range = c( 0.1, 0.5 ) ) +
ggraph::scale_color_viridis( discrete = TRUE, option = "inferno" ) +
ggraph::scale_fill_viridis( discrete = TRUE, option = "inferno" ) +
ggplot2::theme_minimal()
return( g_kk )
}
sna_countries(res)
load("../../research-dissertation/bibdata/rscopus-2024_08_09-chopin.rda")
sna_countries(res)
?file.copy()
file.copy("../../research-dissertation/bibdata/rscopus-2024_08_09-chopin.rda", to = "inst/extdata/sample_data.rda")
rmarkdown::render("vignettes/getting-started.Rmd")
expand_search_terms("chopin")
bibliokit::plot_country_pairs_trend( res, target_country = "China")
bibliokit::plot_country_pairs_trend( res, target_country = "Japan")
bibliokit::plot_country_pairs_trend( res, target_country = "United Kingdome")
bibliokit::plot_country_pairs_trend( res, target_country = "United Kingdom")
bibliokit::sna_topic_country( res )
library(usethis)
library(roxygen2)
library(devtools)
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
rmarkdown::render("vignettes/getting-started.Rmd")
setwd( "C:/Users/Rie/OneDrive - University College London/R/packages/bibliokit/" )
file.remove( "NAMESPACE" )
source( "inst/scripts/generate_readme.R" )
document()
build()
check()
rmarkdown::render("vignettes/getting-started.Rmd")
rmarkdown::render("vignettes/getting-started.Rmd")
