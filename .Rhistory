query = base_query,
start_year = current_year - 10,
end_year = current_year,
search_time = Sys.time(),
total_results = length(combined_entries)
),
get_statements = res$get_statements
)
View(combined_res)
combined_res$metadata$terms
combined_res$metadata$terms[1]
combined_res$metadata$terms[2]
combined_res <- list (
entries = combined_entries,
meta_data = c(
searchtype = searchtype,
terms = list( terms ),
query = base_query,
start_year = current_year - 10,
end_year = current_year,
search_time = Sys.time(),
total_results = length(combined_entries)
),
get_statements = res$get_statements
)
allowed_searchtypes <- c(
"ALL",
"ABS",
"AF-ID",
"AFFIL",
"AFFILCITY",
"AFFILCOUNTRY",
"AFFILORG",
"ARTNUM",
"AU-ID",
"AUTHOR-NAME",
"AUTH",
"AUTHFIRST",
"AUTHLASTNAME",
"AUTHCOLLAB",
"AUTHKEY",
"CASREGNUMBER",
"CHEM",
"CHEMNAME",
"CODEN",
"CONF",
"CONFLOC",
"CONFNAME",
"CONFSPONSORS",
"DOCTYPE",
"DOI",
"EDFIRST",
"EDITOR",
"EDLASTNAME",
"EISSN",
"EXACTSRCTITLE",
"FIRSTAUTH",
"FUND-SPONSOR",
"FUND-ACR",
"FUND-NO",
"INDEXTERMS",
"ISBN",
"ISSN",
"ISSNP",
"ISSUE",
"KEY",
"LANGUAGE",
"MANUFACTURER",
"PAGEFIRST",
"PAGELAST",
"PAGES",
"PMID",
"PUBDATETXT",
"PUBYEAR",
"REF",
"REFAUTH",
"REFTITLE",
"REFSRCTITLE",
"REFPUBYEAR",
"REFARTNUM",
"REFPAGE",
"REFPAGEFIRST",
"SEQBANK",
"SEQNUMBER",
"SRCTITLE",
"SRCTYPE",
"SUBJAREA",
"TITLE",
"TITLE-ABS-KEY",
"TITLE-ABS-KEY-AUTH",
"TRADENAME",
"VOLUME",
"WEBSITE"
)
if ( !searchtype %in% allowed_searchtypes ) {
stop( paste("Invalid searchtype:", searchtype ) )
}
searchtype = "TITLE-ABS-KEY"
terms = c( "quantum computer", "quantum computing", )
terms = c( "quantum computer", "quantum computing" )
otherfields = ""
if ( !searchtype %in% allowed_searchtypes ) {
stop( paste("Invalid searchtype:", searchtype ) )
}
base_query = paste0( searchtype, " (", paste0('"', terms, '"', collapse = ' AND '), ")" )
current_year = as.integer( format( Sys.time(), "%Y") )
get_total_results <- function( query ) {
result <- rscopus::scopus_search( query = query, view = "BASIC", count = 1 )
return( as.integer( result$`search-results`$`opensearch:totalResults` ) )
}
combined_entries <- list()
for ( y in seq( current_year, current_year-10 ) ) {
year_query <- paste( base_query, "AND PUBYEAR =", y )
total_results <- get_total_results( year_query )
if( total_results > 5000 ){
for ( m in 1:12 ){
month_query <- paste( base_query, "AND PUBDATETXT(", month.name[m], y, ")" )
total_results_month <- get_total_results( month_query )
if ( total_results_month > 5000 ) {
stop( "Too many results even when split by month. Re-consider search terms.")
}
res <- rscopus::scopus_search(
query = month_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
} else {
res <- rscopus::scopus_search(
query = year_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
}
get_total_results <- function( query ) {
result <- rscopus::scopus_search( query = query, view = "STANDARD", count = 1 )
return( as.integer( result$`search-results`$`opensearch:totalResults` ) )
}
combined_entries <- list()
for ( y in seq( current_year, current_year-10 ) ) {
year_query <- paste( base_query, "AND PUBYEAR =", y )
total_results <- get_total_results( year_query )
if( total_results > 5000 ){
for ( m in 1:12 ){
month_query <- paste( base_query, "AND PUBDATETXT(", month.name[m], y, ")" )
total_results_month <- get_total_results( month_query )
if ( total_results_month > 5000 ) {
stop( "Too many results even when split by month. Re-consider search terms.")
}
res <- rscopus::scopus_search(
query = month_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
} else {
res <- rscopus::scopus_search(
query = year_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
}
get_total_results <- function( query ) {
result <- rscopus::scopus_search( query = query, view = "STANDARD", count = 1, max_count = 1 )
return( as.integer( result$`search-results`$`opensearch:totalResults` ) )
}
combined_entries <- list()
for ( y in seq( current_year, current_year-10 ) ) {
year_query <- paste( base_query, "AND PUBYEAR =", y )
total_results <- get_total_results( year_query )
if( total_results > 5000 ){
for ( m in 1:12 ){
month_query <- paste( base_query, "AND PUBDATETXT(", month.name[m], y, ")" )
total_results_month <- get_total_results( month_query )
if ( total_results_month > 5000 ) {
stop( "Too many results even when split by month. Re-consider search terms.")
}
res <- rscopus::scopus_search(
query = month_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
} else {
res <- rscopus::scopus_search(
query = year_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
}
total_results
result <- rscopus::scopus_search( query = query, view = "STANDARD", count = 1, max_count = 1 )
result <- rscopus::scopus_search( query = year_query, view = "STANDARD", count = 1, max_count = 1 )
View(result)
get_total_results <- function( query ) {
result <- rscopus::scopus_search( query = query, view = "STANDARD", count = 1, max_count = 1 )
return( result$total_results )
}
searchtype = "TITLE-ABS-KEY"
terms = c( "quantum computer", "quantum computing" )
otherfields = ""
allowed_searchtypes <- c(
"ALL",
"ABS",
"AF-ID",
"AFFIL",
"AFFILCITY",
"AFFILCOUNTRY",
"AFFILORG",
"ARTNUM",
"AU-ID",
"AUTHOR-NAME",
"AUTH",
"AUTHFIRST",
"AUTHLASTNAME",
"AUTHCOLLAB",
"AUTHKEY",
"CASREGNUMBER",
"CHEM",
"CHEMNAME",
"CODEN",
"CONF",
"CONFLOC",
"CONFNAME",
"CONFSPONSORS",
"DOCTYPE",
"DOI",
"EDFIRST",
"EDITOR",
"EDLASTNAME",
"EISSN",
"EXACTSRCTITLE",
"FIRSTAUTH",
"FUND-SPONSOR",
"FUND-ACR",
"FUND-NO",
"INDEXTERMS",
"ISBN",
"ISSN",
"ISSNP",
"ISSUE",
"KEY",
"LANGUAGE",
"MANUFACTURER",
"PAGEFIRST",
"PAGELAST",
"PAGES",
"PMID",
"PUBDATETXT",
"PUBYEAR",
"REF",
"REFAUTH",
"REFTITLE",
"REFSRCTITLE",
"REFPUBYEAR",
"REFARTNUM",
"REFPAGE",
"REFPAGEFIRST",
"SEQBANK",
"SEQNUMBER",
"SRCTITLE",
"SRCTYPE",
"SUBJAREA",
"TITLE",
"TITLE-ABS-KEY",
"TITLE-ABS-KEY-AUTH",
"TRADENAME",
"VOLUME",
"WEBSITE"
)
if ( !searchtype %in% allowed_searchtypes ) {
stop( paste("Invalid searchtype:", searchtype ) )
}
base_query = paste0( searchtype, " (", paste0('"', terms, '"', collapse = ' AND '), ")" )
current_year = as.integer( format( Sys.time(), "%Y") )
get_total_results <- function( query ) {
result <- rscopus::scopus_search( query = query, view = "STANDARD", count = 1, max_count = 1 )
return( result$total_results )
}
combined_entries <- list()
for ( y in seq( current_year, current_year-10 ) ) {
year_query <- paste( base_query, "AND PUBYEAR =", y )
total_results <- get_total_results( year_query )
if( total_results > 5000 ){
for ( m in 1:12 ){
month_query <- paste( base_query, "AND PUBDATETXT(", month.name[m], y, ")" )
total_results_month <- get_total_results( month_query )
if ( total_results_month > 5000 ) {
stop( "Too many results even when split by month. Re-consider search terms.")
}
res <- rscopus::scopus_search(
query = month_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
} else {
res <- rscopus::scopus_search(
query = year_query,
view = "COMPLETE",
count = 25,
max_count = 5000
)
combined_entries <- c( combined_entries, res$entries )
}
}
combined_res <- list (
entries = combined_entries,
meta_data = c(
searchtype = searchtype,
terms = list( terms ),
query = base_query,
start_year = current_year - 10,
end_year = current_year,
search_time = Sys.time(),
total_results = length(combined_entries)
),
get_statements = res$get_statements
)
savedir = "bibdata"
if (!dir.exists( save_dir ) ) {
dir.create( save_dir, recursive = TRUE )
}
save_dir = "bibdata"
base_query
base_query = paste0( search_type, " (", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", first_term, ".rda")
terms
terms[1]
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", terms[1], ".rda")
terms = "quantum computer"
terms[1]
save_file_name
paste(terms)
paste(terms[1])
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", gsub(" ", "_", terms[1]), ".rda")
save_file_name
terms = "quantum"
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", gsub(" ", "_", terms[1]), ".rda")
save_file_name
save_path <- file.path( save_dir, save_file_name )
save_path
if (!dir.exists( save_dir ) ) {
dir.create( save_dir, recursive = TRUE )
}
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", gsub(" ", "_", terms[1]), ".rda")
save_path <- file.path( save_dir, save_file_name )
save( combined_res, file = save_path )
res <- list (
entries = combined_entries,
meta_data = c(
searchtype = searchtype,
terms = list( terms ),
query = base_query,
start_year = current_year - 10,
end_year = current_year,
search_time = Sys.time(),
total_results = length(combined_entries)
),
get_statements = res$get_statements
)
save_dir <- "../../research-dissertation/upgrade/literature_review/bibdata/"
if (!dir.exists( save_dir ) ) {
dir.create( save_dir, recursive = TRUE )
}
save_file_name <- paste0("scopus-", format(Sys.Date(), "%Y_%m_%d"), "-", gsub(" ", "_", terms[1]), ".rda")
save_path <- file.path( save_dir, save_file_name )
save( res, file = save_path )
other_fields = "AND AUTHOR-NAME(smith)"
base_query = paste0( search_type, " (", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
search_type <- "TITLE-ABS-KEY"
base_query = paste0( search_type, " (", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste( search_type, " (", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste( search_type, "(", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
terms = c("quantum computing", "qbit", "quantum theory")
base_query = paste( search_type, "(", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste0( search_type, "(", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste0( search_type, "(", paste('"', terms, '"', collapse = 'AND'), ")", other_fields )
base_query
base_query = paste0( search_type, "(", paste('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste0( search_type, "(", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
base_query = paste( search_type, "(", paste0('"', terms, '"', collapse = ' AND '), ")", other_fields )
base_query
document()
library(usethis)
library(roxygen2)
library(devtools)
document()
build()
check()
document()
build()
check()
?head
entries <- res$entries
data <- lapply( entries, function( entry ) {
title <- entry$`dc:title`
year <- substr( entry$`prism:coverDate`, 1, 4 )
country <- if ( !is.null(entry$affiliation[[1]]$`affiliation-country`) ) {
entry$affiliation[[1]]$`affiliation-country`
} else {
"Unknown"
}
list( title = title, year = year, country = country )
})
data.tib <- tibble::tibble(
title   = sapply( data, `[[`, "title" ),
year    = sapply( data, `[[`, "year" ),
country = unlist( lapply( data, `[[`, "country" ) )
)
top_countries <- data.tib |>
dplyr::filter( country != "Unknown" )  |>
dplyr::count( country, sort = TRUE ) |>
utils::head( 8 ) |>
dplyr::arrange( n ) |>
dplyr::pull( country )
data.tib <- data.tib |>
dplyr::mutate( year = ifelse( year <= 2015, "-2015", year )) |>
dplyr::mutate( year = factor( year ) ) |>
dplyr::mutate( country = ifelse( country %in% c(top_countries, "Unknown"), country, "Other")) |>
dplyr::mutate( country = factor( country, levels = c( "Unknown", "Other", top_countries )))
share_data.tib <- data.tib |>
dplyr::count( country ) |>
dplyr::mutate( share = n / sum(n) )
max_n <- max( dplyr::count( data.tib, country )$n )
len_n <- length( unique(data.tib$country) )
g_bar <- data.tib |>
ggplot2::ggplot() +
ggplot2::geom_bar( position = ggplot2::position_stack( reverse = TRUE),
ggplot2::aes( y = country, fill = year ) ) +
ggplot2::geom_text( stat = "count", ggplot2::aes( y = country, label = after_stat(count) ), hjust = -.5 ) +
ggplot2::scale_fill_brewer( palette = "RdBu" ) +
ggplot2::geom_point( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.15, y = country, size = share ),
shape = 21, fill = "lightblue", colour = "lightblue",
show.legend = FALSE ) +
ggplot2::geom_text( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.25 , y = country, label = sprintf("%.1f%%", share*100) ),
colour = "navy", show.legend = FALSE ) +
ggplot2::annotate( "text", x = max_n*0.5, y = len_n + 1, label = "Total Number of Publications" ) +
ggplot2::annotate( "text", x = max_n*1.2 , y = len_n + 1, label = "Global Share" ) +
ggplot2::scale_size_continuous( range = c( 0, 20 )) +
ggplot2::scale_x_discrete( expand = c(0,0,0.10,0) ) +
ggplot2::scale_y_discrete( expand = c(0,0,0,1.5) ) +
ggplot2::theme_minimal() +
ggplot2::labs( x = "Number and Global Share of Publications",
y = "Country",
fill = "" ) +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.65, 0.5),
legend.box = "vertical"
)
g_bar
?after_stat
g_bar <- data.tib |>
ggplot2::ggplot() +
ggplot2::geom_bar( position = ggplot2::position_stack( reverse = TRUE),
ggplot2::aes( y = country, fill = year ) ) +
ggplot2::geom_text( stat = "count", ggplot2::aes( y = country, label = ggplot2::after_stat(count) ), hjust = -.5 ) +
ggplot2::scale_fill_brewer( palette = "RdBu" ) +
ggplot2::geom_point( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.15, y = country, size = share ),
shape = 21, fill = "lightblue", colour = "lightblue",
show.legend = FALSE ) +
ggplot2::geom_text( data = share_data.tib,
ggplot2::aes( x = max(n) * 1.25 , y = country, label = sprintf("%.1f%%", share*100) ),
colour = "navy", show.legend = FALSE ) +
ggplot2::annotate( "text", x = max_n*0.5, y = len_n + 1, label = "Total Number of Publications" ) +
ggplot2::annotate( "text", x = max_n*1.2 , y = len_n + 1, label = "Global Share" ) +
ggplot2::scale_size_continuous( range = c( 0, 20 )) +
ggplot2::scale_x_discrete( expand = c(0,0,0.10,0) ) +
ggplot2::scale_y_discrete( expand = c(0,0,0,1.5) ) +
ggplot2::theme_minimal() +
ggplot2::labs( x = "Number and Global Share of Publications",
y = "Country",
fill = "" ) +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.65, 0.5),
legend.box = "vertical"
)
g_bar
use_version( "minor" )
document()
document()
build()
check()
